SINOPSIS 
    void play_music(object ob | object *ob, string name)
    void play_music(object ob | object *ob
                   , string name, object exclude |object *exclude)
    void play_music(object ob | object *ob, string name
                   , object exclude |object *exclude, int volume)
    void play_music(object ob | object *ob, string name
                   , object exclude |object *exclude, int volume, int loop)
    void play_music(object ob | object *ob, string name
                   , object exclude |object *exclude, int volume, int loop, int contin)
    void play_music(object ob | object *ob, string name
                   , object exclude |object *exclude, int volume, int loop, int contin, string type)
    void play_music(object ob | object *ob, string name
                   , object exclude |object *exclude, int volume, int loop, int contin, string type, string url) 

DESCRIPCIÓN:
    Envía una cadena de texto al cliente en el formato Mud Sound Protocol, que
    desencadena por parte de dicho cliente, la reproducción del fichero de música
    introducido
    en el parámetro <name>, para el / los objetos introducidos en <ob>,
    excluyendo si se especifica al / los objetos del parámetro <exclude>, y con
    el volúmen,
    repeticiones, continuidad, tipo de fichero musical y url alternativa especificados en
    <volume>, <loop>, <contin>, <type> y <url> respectivamente. 

DETALLE:
    Esta función, permite reproducir ficheros musicales almacenados en el cliente de juego
    que utilice el jugador, si este lo soporta.
    Para ello, sólo se debe enviar una cadena específica a dicho cliente,
    conteniendo los parámetros estándares del protocolo MSP (Mud Sound
    Protocol). 

    Los parámetros que acepta esta función son:

    1. ob: El / los objetos que escucharán la música.
    Puede ser un array de objetos o un objeto único. En caso de ser un array,
    la función se encargará de obtener los jugadores, las habitaciones, y los jugadores
    que estén dentro de esas habitaciones, enviándoles el comando, siempre y cuando
    el jugador pueda escuchar, tenga los efectos musicales activados, y esa música en
    concreto habilitada (CanHear, QueryMusic() y QueryMusicEnabled()).

    2. Name: El nombre del fichero a reproducir.
    El nombre del fichero musical debe especificarse utilizando la ruta absoluta del
    mismo (o los defines que se hayan creado a este efecto) (/sys/sounds.h).
    Ejemplo: "/music/global/miscelanea/musica_sionicos.mid"
    Si solo especificamos el nombre del fichero musical sin utilizar una ruta, la ruta
    utilizada será la introducida en el parámetro <type> que veremos más
    adelante.
    Nota: A fin de ofrecer al jugador varios paquetes de audio con distintos soportes,
    en caso en el que el sonido a enviar esté dentro de los formatos a elegir (ver
    SOUND_SUPPORT), no se debe poner la extensión al archivo. La propia función se
    encargará de obtener la extensión adecuada para cada jugador, dependiendo del
    formato que este haya elegido como formato de reproducción de ficheros de audio
    digital. Es decir, si nuestro archivo está dentro de este define (wav, mp3 u ogg),
    no se debe poner la extensión. En otro caso, sí se debe utilizar.


    También se pueden utilizar comodines en el nombre del fichero musical, de modo que,
    si hay varias coincidencias, el cliente reproducirá aleatoriamente
    cualquiera
    de los ficheros musicales encontrados. En caso de utilizarse la opción <loop> con más
    de una repetición, el cliente volverá a reproducir uno de los ficheros musicales
    encontrados de forma aleatoria por cada repetición.

    3. exclude: Objetos excluidos de los objetos que escucharán el fichero musical.
    En caso de introducirse un array de objetos jugador en el primer parámetro,
    se comprobará si alguno de ellos está en exclude, y no se le enviará el
    comando
    de fichero musical. De igual modo, si el objeto pasado como primer parámetro es un
    objeto habitación, el exclude también se tendrá en cuenta, no enviando el
    fichero musical
    a los jugadores de la habitación que se encuentren en dicho parámetro
    exclude. 

    Ejemplo:
    play_music(load_object("/d/simauria/comun/habitacion/marhalt/nandor/calle42n
    "), "/music/zonas/simauria/llegada_a_nandor.mid", TP);
    Enviaría el fichero musical a toda la habitación escepto a TP, si este se encuentra
    dentro de esa habitación. 

    4. volume: Volúmen del fichero musical:
    El volúmen por defecto de un fichero musical es 100. El máximo es 100, y el mínimo es
    1. 

    5. loop: Número de repeticiones del fichero musical.
    Loop puede ser cualquier valor entre -1 y __INT_MAX__. Por defecto, 0.
    Si se especifica -1, significa que el fichero musical se repetirá de forma
    indefinida, hasta que el jugador cierre el cliente, o bien hasta que reciba
    el comando
    de detención de ficheros musicales codificado por la función stop_music(). 

    6. Contin: Continuidad del sonido.
    Determina si, en caso de volver a solicitar un archivo midi que ya está
    sonando, hacer que, en caso de estar contin a 1 siga sonando sin recomenzar,
    y en caso de estar a 0, vuelva a ocmenzar desde el principio.
    En ambos casos, el contador de repeticiones, si se usaba loop, se pondrá a 0.
    El volúmen que se tendrá en cuenta, siempre será el especificado en la última
    repetición.

    7. Type:
    Este parámetro se utiliza de forma poco frecuente. Es más, segúramente en
    Simauria no lo utilizaremos, aunque lo implemento para ceñirme al estándard
    del MSP.
    Este parámetro codifica otro modo de definir el subdirectorio de un archivo
    de fichero musical.
    Es decir, si como <name> ponemos: "musica_sionicos.mid", y como <type>
    ponemos: "/music/global/miscelanea/", es como si en el nombre hubiésemos puesto
    /music/global/miscelanea/musica_sionicos.mid.

    8. Url:
    Este parámetro (nuevo en la última versión actualizada del MSP), permite, en
    caso de que el cliente no encuentre el fichero musical requerido por <name>, bajarse
    dicho fichero musical de internet, poniendo como ruta la url especificada en este
    parámetro, y agregándole la ruta del nombre de archivo, o de la
    concatenación de <type> y <name>, si estos dos parámetros estuvieran
    presentes.
    Ejemplo, si como <url> pusiésemos "http://www.simauria.org/sounds", y como
    <name> /music/global/miscelanea/musica_sionicos.mid, el cliente intentaría bajarse el
    archivo: http://www.simauria.org/sounds/music/global/miscelanea/musica_sionicos.mid.
    Si pusiésemos como <url>: "http://www.simauria.org/sounds", como <name>
    "musica_sionicos.mid" y como <type>: "/music/global/miscelanea/", obtendríamos el mismo
    resultado que con el ejemplo anterior.

Ver también:
    stop_music(E), play_sound(E), stop_sound(E).